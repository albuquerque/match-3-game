name: Android Build (Godot)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GODOT_VERSION: 4.3
  EXPORT_NAME: match3-game
  GODOT_DL_BASE: https://downloads.tuxfamily.org/godotengine/4.3

jobs:
  android-export:
    name: Android Export
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Godot Assets
        id: cache-godot
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/godot/export_templates
            ~/godot
          key: godot-${{ env.GODOT_VERSION }}

      - name: Download Godot Headless + Export Templates (if needed)
        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          set -e
          echo "Downloading Godot headless..."
          curl -L -o godot_headless.zip "$GODOT_DL_BASE/Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip"
          unzip -q godot_headless.zip -d ~/godot_raw
          mv ~/godot_raw/Godot_v${GODOT_VERSION}-stable_linux.x86_64 ~/godot
          chmod +x ~/godot
          echo "Godot headless installed at ~/godot"
          echo "Downloading export templates..."
          curl -L -o templates.tpz "$GODOT_DL_BASE/Godot_v${GODOT_VERSION}-stable_export_templates.tpz"
          mkdir -p ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
          unzip -q templates.tpz -d /tmp/templates_extracted
          # Move contents of templates dir to version folder
          mv /tmp/templates_extracted/templates/* ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable/
          echo "Templates installed: $(ls ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable | wc -l) files"

      - name: Verify Godot & Templates
        run: |
          set -e
          ~/godot --version
          echo "Listing templates:"; ls -1 ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable | head -20
          test -f ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable/android_release.apk || (echo "Android template missing" && exit 1)

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK (platform + build tools + NDK)
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '9477386'
          accept-android-sdk-licenses: true
          packages: 'platforms;android-33 platform-tools build-tools;33.0.2 ndk;25.1.8937393'

      - name: Prepare Android Build Template
        run: |
          set -e
          echo "Ensuring clean android build template..."
          rm -rf android
          mkdir -p android
          # Locate android_source.zip inside export templates
          ANDROID_SRC=$(find ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable -maxdepth 1 -name 'android_source.zip' | head -1)
          if [ -z "$ANDROID_SRC" ]; then
            echo "android_source.zip not found in export templates" && exit 1
          fi
          unzip -q "$ANDROID_SRC" -d android
          # Godot expects android/build/ structure (template already has build/)
          if [ ! -f android/build/build.gradle ]; then
            echo "Template extraction did not produce android/build/build.gradle" && find android -maxdepth 3 -type f -name build.gradle && exit 1
          fi
          echo "Template files:"; find android -maxdepth 3 -type f -name build.gradle
          # Remove any accidentally committed compiled assets if present
          rm -rf android/build/assets || true

      - name: Create Editor Settings
        run: |
          set -e
          SETTINGS_DIR=~/.config/godot
          mkdir -p "$SETTINGS_DIR"
          cat > "$SETTINGS_DIR/editor_settings-4.tres" <<EOF
[gd_resource type="EditorSettings" format=3]

[resource]
export/android/android_sdk_path = "${ANDROID_SDK_ROOT:-$ANDROID_HOME}"
export/android/java_sdk_path = "$JAVA_HOME"
export/android/debug_keystore = ""
export/android/force_system_user = false
export/android/shutdown_adb_on_exit = true
export/android/use_custom_build_tools_version = false
export/android/custom_build_tools_version = "33.0.2"
EOF
          echo "Editor settings created:"; sed -n '1,25p' "$SETTINGS_DIR/editor_settings-4.tres"

      - name: Sanity Check Android Tooling
        run: |
          set -e
          echo "ANDROID_HOME=$ANDROID_HOME"; echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"; echo "JAVA_HOME=$JAVA_HOME"
          ls -1 $ANDROID_HOME/platform-tools | head -10 || true
          test -x $ANDROID_HOME/platform-tools/adb || (echo "adb missing" && exit 1)
          test -d $ANDROID_HOME/build-tools/33.0.2 || (echo "build tools 33.0.2 missing" && exit 1)
          ls -1 android/build | head -20

      - name: List Export Presets
        run: |
          echo "Export presets file:"; sed -n '1,120p' export_presets.cfg

      - name: Export Android APK
        run: |
          set -e
          mkdir -p build/android
          ~/godot --headless --verbose --export-release "Android" build/android/${EXPORT_NAME}.apk
          ls -lh build/android

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/android/*.apk

      - name: (Optional) Create Timestamped Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: android-v${{ env.GODOT_VERSION }}-${{ github.run_number }}
          name: Android Build ${{ env.GODOT_VERSION }} (Run ${{ github.run_number }})
          body: |
            Automated Android export generated by CI.
            Commit: ${{ github.sha }}
          files: build/android/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
