name: Android Build (Godot)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GODOT_VERSION: 4.3
  EXPORT_NAME: match3-game

jobs:
  android-export:
    name: Android Export
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Godot Assets
        id: cache-godot
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/godot/export_templates
            ~/godot
          key: godot-${{ env.GODOT_VERSION }}

      - name: Download Godot Headless + Export Templates (if needed)
        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          RELEASE_BASE="https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable"
          HEADLESS_FILE="Godot_v${GODOT_VERSION}-stable_linux.x86_64.zip"
          TEMPLATES_FILE="Godot_v${GODOT_VERSION}-stable_export_templates.tpz"
          download() {
            local file="$1" url="${RELEASE_BASE}/$1"
            echo "Downloading $file from $url"
            curl -fSL --connect-timeout 20 --retry 6 --retry-delay 5 --retry-all-errors -o "$file" "$url"
          }
          download "$HEADLESS_FILE"
          unzip -q "$HEADLESS_FILE" -d ~/godot_raw
          mv ~/godot_raw/Godot_v${GODOT_VERSION}-stable_linux.x86_64 ~/godot
          chmod +x ~/godot
          echo "Godot headless installed at ~/godot"
          download "$TEMPLATES_FILE"
          mkdir -p ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
          unzip -q "$TEMPLATES_FILE" -d /tmp/templates_extracted
          mv /tmp/templates_extracted/templates/* ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable/
          echo "Templates installed: $(ls ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable | wc -l) files"

      - name: Verify Godot & Templates
        run: |
          set -e
          ~/godot --version
          echo "Listing templates:"; ls -1 ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable | head -20
          test -f ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable/android_release.apk || (echo "Android template missing" && exit 1)

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '9477386'
          accept-android-sdk-licenses: true
          packages: 'platforms;android-33 platform-tools build-tools;33.0.2 ndk;25.1.8937393'

      - name: Install Android Build Template
        run: |
          set -e
          echo "Installing Android build template..."
          # Use Godot to install the Android build template (simulates Project menu action)
          ~/godot --headless --quit --editor --path . --install-android-build-template
          
          # Verify the template was installed
          if [ -f "android/build/build.gradle" ]; then
            echo "✅ Android build template installed successfully"
          else
            echo "❌ Failed to install Android build template, falling back to manual installation"
            # Extract android_source.zip manually as fallback
            ANDROID_SRC=$(find ~/.local/share/godot/export_templates/4.3.stable -name 'android_source.zip' | head -1)
            if [ -n "$ANDROID_SRC" ]; then
              echo "Found android_source.zip, extracting to android/ directory"
              rm -rf android_temp
              mkdir -p android_temp
              unzip -q "$ANDROID_SRC" -d android_temp
              
              # Handle both flat and nested structures
              if [ -d "android_temp/android" ]; then
                cp -r android_temp/android/* android/
              else
                cp -r android_temp/* android/
              fi
              rm -rf android_temp
              echo "✅ Manual installation completed"
            else
              echo "❌ Could not find android_source.zip"
              exit 1
            fi
          fi

      - name: Create Editor Settings
        run: |
          set -e
          SETTINGS_DIR=~/.config/godot
          mkdir -p "$SETTINGS_DIR"
          {
            echo '[gd_resource type="EditorSettings" format=3]'
            echo
            echo '[resource]'
            echo "export/android/android_sdk_path = \"${ANDROID_SDK_ROOT:-$ANDROID_HOME}\""
            echo "export/android/java_sdk_path = \"$JAVA_HOME\""
            echo 'export/android/debug_keystore = ""'
            echo 'export/android/force_system_user = false'
            echo 'export/android/shutdown_adb_on_exit = true'
            echo 'export/android/use_custom_build_tools_version = false'
            echo 'export/android/custom_build_tools_version = "33.0.2"'
          } > "$SETTINGS_DIR/editor_settings-4.tres"

      - name: Export Android APK
        run: |
          set -e
          mkdir -p builds
          ~/godot --headless --verbose --export-debug "Android" builds/${EXPORT_NAME}-debug.apk
          ls -lh builds

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: builds/*.apk

      - name: (Optional) Create Timestamped Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: android-v${{ env.GODOT_VERSION }}-${{ github.run_number }}
          name: Android Build ${{ env.GODOT_VERSION }} (Run ${{ github.run_number }})
          body: |
            Automated Android export generated by CI.
            Commit: ${{ github.sha }}
          files: builds/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
