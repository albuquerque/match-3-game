name: Build and Release Match-3 Game

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GODOT_VERSION: 4.3
  EXPORT_NAME: match3-game

jobs:
  # Single job that builds all platforms to save runner minutes
  build-all-platforms:
    name: Build All Platforms
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Godot Export Templates
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          build-tools: '33.0.2'
          ndk-version: '25.1.8937393'

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Configure Android Build Environment
        run: |
          # Set Android SDK environment variables
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          
          # Verify installations
          echo "=== Environment Check ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          
          echo "=== Android SDK Structure ==="
          ls -la $ANDROID_HOME/ || echo "Android SDK not found"
          ls -la $ANDROID_HOME/build-tools/ || echo "build-tools not found"
          ls -la $ANDROID_HOME/build-tools/33.0.2/ || echo "build-tools 33.0.2 not found"
          
          echo "=== Java Version ==="
          java -version
          javac -version
          
          # Create Godot editor settings directory
          mkdir -p ~/.local/share/godot/editor_settings-4.3/
          
          # Create comprehensive Godot editor settings using echo
          echo '[gd_resource type="EditorSettings" format=3]' > ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo '' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo '[resource]' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo "export/android/android_sdk_path = \"$ANDROID_HOME\"" >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/debug_keystore = ""' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/debug_keystore_user = "androiddebugkey"' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/debug_keystore_pass = "android"' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/force_system_user = false' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/shutdown_adb_on_exit = true' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/one_click_deploy_clear_previous_installs = false' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo "export/android/java_sdk_path = \"$JAVA_HOME\"" >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/use_custom_build_tools_version = false' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'export/android/custom_build_tools_version = "33.0.2"' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'network/http_proxy/host = ""' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'network/http_proxy/port = -1' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'network/https_proxy/host = ""' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          echo 'network/https_proxy/port = -1' >> ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres
          
          echo "=== Created Godot Editor Settings ==="
          cat ~/.local/share/godot/editor_settings-4.3/editor_settings-4.3.tres

      - name: Install Android Build Template
        run: |
          # Download and install Android build template
          echo "Installing Android build template..."
          
          # Create android directory if it doesn't exist
          mkdir -p android
          
          # Download Android export template from Godot
          TEMPLATE_URL="https://github.com/godotengine/godot/releases/download/4.3-stable/Godot_v4.3-stable_export_templates.tpz"
          echo "Downloading export templates..."
          wget -q "$TEMPLATE_URL" -O /tmp/export_templates.tpz
          
          # Extract templates
          cd /tmp
          unzip -q export_templates.tpz
          
          # Debug: Show extracted structure
          echo "=== Export templates structure ==="
          find . -name "*android*" -type f
          find . -name "*.zip" -type f | head -10
          
          # Find Android template with more specific search
          ANDROID_TEMPLATE=$(find . -name "android_source.zip" -type f | head -1)
          if [ -n "$ANDROID_TEMPLATE" ]; then
            echo "Found Android template: $ANDROID_TEMPLATE"
            # Convert to absolute path
            ANDROID_TEMPLATE_ABS=$(realpath "$ANDROID_TEMPLATE")
            echo "Absolute path: $ANDROID_TEMPLATE_ABS"
            # Check if file actually exists and is readable
            if [ -f "$ANDROID_TEMPLATE_ABS" ] && [ -r "$ANDROID_TEMPLATE_ABS" ]; then
              echo "Android template file is accessible"
              # Extract Android template to project
              cd "$GITHUB_WORKSPACE"
              unzip -q "$ANDROID_TEMPLATE_ABS" -d android/
              echo "Android build template installed successfully"
              ls -la android/
            else
              echo "Android template file exists but is not readable"
              ls -la "$ANDROID_TEMPLATE_ABS"
            fi
          else
            echo "Android template not found, trying alternative approach..."
            # Look for template files in templates directory
            cd /tmp
            TEMPLATE_DIR=$(find . -name "templates" -type d | head -1)
            if [ -n "$TEMPLATE_DIR" ]; then
              echo "Found templates directory: $TEMPLATE_DIR"
              ls -la "$TEMPLATE_DIR"
              ANDROID_TEMPLATE=$(find "$TEMPLATE_DIR" -name "*android*" -type f | head -1)
              if [ -n "$ANDROID_TEMPLATE" ]; then
                echo "Found Android template in templates dir: $ANDROID_TEMPLATE"
                # Convert to absolute path
                ANDROID_TEMPLATE_ABS=$(realpath "$ANDROID_TEMPLATE")
                echo "Absolute path: $ANDROID_TEMPLATE_ABS"
                cd "$GITHUB_WORKSPACE"
                unzip -q "$ANDROID_TEMPLATE_ABS" -d android/
                echo "Android build template installed successfully"
                ls -la android/
              else
                echo "No Android template found in templates directory"
                ls -la "$TEMPLATE_DIR"
              fi
            else
              echo "No templates directory found"
              echo "Available files in /tmp:"
              find /tmp -name "*" -type f | head -20
            fi
          fi

      - name: Debug Environment
        run: |
          echo "Current directory: $(pwd)"
          echo "Godot version check:"
          godot --version
          echo "Export presets check:"
          ls -la export_presets.cfg
          echo "Android SDK location:"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"

      - name: Build All Platforms
        run: |
          # Create build directories that match export preset paths
          mkdir -v -p build/android
          mkdir -v -p build/windows  
          mkdir -v -p build/linux
          mkdir -v -p build/web
          mkdir -v -p build/mac
          
          # Show directory structure before building
          echo "Directory structure before building:"
          find build -type d
          
          # Build Windows
          echo "Building Windows..."
          godot --headless --verbose --export-release "Windows Desktop"
          
          # Build Linux  
          echo "Building Linux..."
          godot --headless --verbose --export-release "Linux/X11"
          
          # Build Web
          echo "Building Web..."
          godot --headless --verbose --export-release "Web"
          
          # Build macOS
          echo "Building macOS..."
          godot --headless --verbose --export-release "macOS"
          
          # Build Android (skip if Android SDK issues)
          echo "Building Android..."
          godot --headless --verbose --export-release "Android" || echo "Android build failed, continuing..."
          
          # Verify builds were created
          echo "Build verification:"
          find build -type f
          ls -la build/*/ 2>/dev/null || echo "Some build directories are empty"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-builds
          path: build/

      - name: Deploy Web to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-all-platforms
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: all-builds
          path: build/

      - name: Create ZIP packages
        run: |
          cd build
          zip -r ${EXPORT_NAME}-windows.zip windows/
          zip -r ${EXPORT_NAME}-linux.zip linux/
          zip -r ${EXPORT_NAME}-web.zip web/
          zip -r ${EXPORT_NAME}-mac.zip mac/
          zip -r ${EXPORT_NAME}-android.zip android/

      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=v$(date +%Y.%m.%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: Release ${{ steps.tag.outputs.release_tag }}
          body: |
            ## 🎮 Match-3 Game Release
            
            This release contains builds for all supported platforms:
            
            ### 📥 Downloads
            - **Windows**: `match3-game-windows.zip`
            - **Linux**: `match3-game-linux.zip`
            - **macOS**: `match3-game-mac.zip`
            - **Android**: `match3-game-android.zip` (contains APK)
            - **Web**: `match3-game-web.zip` (also deployed to GitHub Pages)
            
            ### 🎯 Installation Instructions
            
            **Windows/Linux/macOS**: Extract the zip file and run the executable.
            
            **Android**: Extract the zip, enable "Install from Unknown Sources" in your device settings, and install the APK.
            
            **Web**: Visit the GitHub Pages deployment or extract and serve the web files locally.
            
            ---
            *Built automatically from commit ${{ github.sha }}*
          files: |
            build/match3-game-windows.zip
            build/match3-game-linux.zip
            build/match3-game-web.zip
            build/match3-game-mac.zip
            build/match3-game-android.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
